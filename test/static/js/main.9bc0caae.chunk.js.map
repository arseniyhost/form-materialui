{"version":3,"sources":["hooks/hookStyles.js","common/utils.js","Component/ListArrays/ListArrays.js","Component/FormList/ModalPop/ModalPop.js","Component/ModalForm/ModalForm.js","Component/FormList/FormList.js","App.js","serviceWorker.js","redux/redux-store.js","index.js","Component/ModalForm/ModalForm.module.css"],"names":["useStyles","makeStyles","theme","createStyles","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","renderInput","label","input","Input","placeholder","type","renderSelect","children","FormControl","Select","native","color","ListElementArrays","fields","map","ing","id","key","Grid","container","direction","item","xs","Field","component","name","c","IconButton","size","onClick","remove","Button","disabled","length","style","btnPush","push","ModalPop","classes","modelActive","offModelActive","handleSubmit","Modal","className","open","Fade","in","onSubmit","Box","head","FieldArray","btnSave","ListFormRedux","reduxForm","form","onModelActive","variant","ModalForm","useState","setModelActive","Container","formData","console","log","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9bc0caae.chunk.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }),\r\n);","import React from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport { FormControl, Select } from '@material-ui/core';\r\n\r\nexport const renderInput = ({ label, input }) => {\r\n    return <Input\r\n        label={label}\r\n        placeholder={label}\r\n        {...input}\r\n        type=\"number\"\r\n    />\r\n}\r\n\r\nexport const renderSelect = ({ input, children }) => {\r\n    return <FormControl>\r\n        <Select\r\n            native {...input}\r\n        >\r\n            {children}\r\n        </Select>\r\n    </FormControl>\r\n}","import React from 'react';\r\nimport { Field } from 'redux-form';\r\nimport style from './../ModalForm/ModalForm.module.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { renderInput, renderSelect } from '../../common/utils';\r\nimport { Grid } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nlet color = ['red', 'green', 'blue', 'yellow'];\r\n\r\nconst ListElementArrays = ({ fields }) => {\r\n    return (\r\n        <ul>\r\n            {fields.map((ing, id) => {\r\n                return <div key={ing}>\r\n                    <Grid spacing={1} container direction=\"row\" >\r\n                        <Grid item xs={4} spacing={1}>\r\n                            <Field component={renderSelect} name={ing + \"colors\"}>\r\n                                <option>Выберите</option>\r\n                                {\r\n                                    color.map(c => {\r\n                                        return <option key={c}>{c}</option>\r\n                                    })\r\n                                }\r\n                            </Field>\r\n                        </Grid>\r\n                        <Grid item xs={2} spacing={1}>\r\n                            <Field\r\n                                name={ing + \"number\"}\r\n                                type=\"number\"\r\n                                component={renderInput}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={4} spacing={1}>\r\n                            <IconButton color=\"secondary\" size=\"small\" onClick={() => fields.remove(id)}><CloseIcon /></IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            })}\r\n            <li>\r\n                <Button disabled={fields.length + 1 > 5 ? true : false} color=\"primary\" id={style.btnPush} type=\"button\" onClick={() => fields.push()}>\r\n                    Добавить\r\n            </Button>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ListElementArrays;","import React from 'react';\r\nimport { FieldArray } from 'redux-form';\r\nimport style from './../../ModalForm/ModalForm.module.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListElementArrays from './../../ListArrays/ListArrays';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nconst ModalPop = ({ classes, modelActive, offModelActive, handleSubmit }) => {\r\n    return (\r\n        <Modal className={classes.modal} open={modelActive}>\r\n            <Fade in={modelActive}>\r\n                <form onSubmit={handleSubmit} className={style.modal}>\r\n                    <Box className={style.head}>\r\n                        <h2>Структура номера</h2><IconButton id=\"btnClose\" color=\"inherit\" onClick={offModelActive}><CloseIcon /></IconButton>\r\n                    </Box>\r\n                    <FieldArray name=\"list\" component={ListElementArrays} />\r\n                    <button className={style.btnSave}>Сохранить</button>\r\n                    <Button onClick={offModelActive}>Отмена</Button>\r\n                </form>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalPop;","import React, { useState } from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useStyles } from '../../hooks/hookStyles';\r\nimport { FormList } from '../FormList/FormList';\r\n\r\n\r\nconst ModalForm = () => {\r\n    const classes = useStyles();\r\n    const [modelActive, setModelActive] = useState(false);\r\n\r\n    const onModelActive = () => {\r\n        setModelActive(true);\r\n    }\r\n\r\n    const offModelActive = () => {\r\n        setModelActive(false);\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        console.log(formData);\r\n        setModelActive(false);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <ListFormRedux classes={classes} onSubmit={onSubmit} onModelActive={onModelActive} offModelActive={offModelActive} modelActive={modelActive} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst ListFormRedux = reduxForm({\r\n    form: \"test\"\r\n})(FormList);\r\n\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport ModalPop from './ModalPop/ModalPop';\r\n\r\nexport const FormList = ({ offModelActive, onModelActive, modelActive, handleSubmit, classes }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <Box>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onModelActive}>Open</Button>\r\n                <ModalPop classes={classes} modelActive={modelActive} offModelActive={offModelActive} handleSubmit={handleSubmit} />\r\n            </Box>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport ModalForm from './Component/ModalForm/ModalForm';\n\nconst App = () => {\n  return (\n    <div>\n      <ModalForm />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers} from 'redux';\r\nimport { reducer as formReducer} from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n    form: formReducer\r\n});\r\n\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalForm_modal__3aB4F\",\"btnIcon\":\"ModalForm_btnIcon__3knoi\",\"head\":\"ModalForm_head__1TGjz\",\"grid\":\"ModalForm_grid__1G4CX\",\"btnPush\":\"ModalForm_btnPush__19GJb\",\"btnSave\":\"ModalForm_btnSave__3NPjo\",\"btnClose\":\"ModalForm_btnClose__8jGgi\"};"],"sourceRoot":""}